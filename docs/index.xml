<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reversing Stories</title>
    
    
    
    <link>/</link>
    <description>Recent content on Reversing Stories</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jan 2023 13:54:33 +0700</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>FlareOn9 Write-Ups</title>
      <link>/posts/flare0n9/</link>
      <pubDate>Wed, 04 Jan 2023 13:54:33 +0700</pubDate>
      
      <guid>/posts/flare0n9/</guid>
      <description>
        
          
          
          
        
        
        
          Hi friend, this year is my third year following Flare-on and is the first time i managed to solve all the challenges. I finished in 276th place as can be seen here. For those of you who don&amp;rsquo;t know what Flare-On is, you can read it here, is an annual reverse engineering CTF by Mandiant (formerly by FireEye).
I&amp;rsquo;m not going to make write-up for challenge 1 because i don&amp;rsquo;t think it&amp;rsquo;s needed, let&amp;rsquo;s jump to challenge 2.
          
        
        </description>
    </item>
    
    <item>
      <title>MalwareTech Windows Reversing Challenge #7 Write-Ups</title>
      <link>/posts/malwaretech-chal7/</link>
      <pubDate>Wed, 29 Jun 2022 13:41:11 +0700</pubDate>
      
      <guid>/posts/malwaretech-chal7/</guid>
      <description>
        
          
          
          
        
        
        
          [ Ransomware ]# The goal of ransomware is to encrypt files; fortunately, ransomware developers often ignore the #1 rule of crypto (never roll your own crypto). As a result, it is sometimes possible to recover encrypted files without paying the ransom. These challenges are designed to test your ability to recover ransomware encrypted data.
 Ransomware1#Description:
 The administrator for FlagCorp was using an outdated Windows 7 system and got infected with some ransomware.
          
        
        </description>
    </item>
    
    <item>
      <title>MalwareTech Windows Reversing Challenge #6 Write-Ups</title>
      <link>/posts/malwaretech-chal6/</link>
      <pubDate>Sat, 25 Jun 2022 14:47:17 +0700</pubDate>
      
      <guid>/posts/malwaretech-chal6/</guid>
      <description>
        
          
          
          
        
        
        
          [ De-virtualization ]# Sometimes malware attempts to hinder reverse engineering by implementing a virtual machine which runs custom bytecode. These challenges are designed to test your ability to reverse engineer &amp;amp; manipulate custom bytecode.
 VM1#Description:
 vm1.exe implements a simple 8-bit virtual machine (VM) to try and stop reverse engineers from retrieving the flag. The VMâ€™s RAM contains the encrypted flag and some bytecode to decrypt it.
          
        
        </description>
    </item>
    
    <item>
      <title>MalwareTech Windows Reversing Challenge #5 Write-Ups</title>
      <link>/posts/malwaretech-chal5/</link>
      <pubDate>Mon, 30 May 2022 12:02:46 +0700</pubDate>
      
      <guid>/posts/malwaretech-chal5/</guid>
      <description>
        
          
          
          
        
        
        
          [ Shellcode ]# Position independent code (AKA Shellcode) is assembly code which can simply be copied to a memory location and run. Due to the lack of need for complex loading &amp;amp; initialization, it is popular for many tasks such as code injection. These challenges are designed to test your ability to reverse engineer malware shellcode.
 Shellcode2#Hi, now we are given a PE file named shellcode2.
          
        
        </description>
    </item>
    
    <item>
      <title>MalwareTech Windows Reversing Challenge #4 Write-Ups</title>
      <link>/posts/malwaretech-chal4/</link>
      <pubDate>Tue, 24 May 2022 13:14:20 +0700</pubDate>
      
      <guid>/posts/malwaretech-chal4/</guid>
      <description>
        
          
          
          
        
        
        
          [ Shellcode ]# Position independent code (AKA Shellcode) is assembly code which can simply be copied to a memory location and run. Due to the lack of need for complex loading &amp;amp; initialization, it is popular for many tasks such as code injection. These challenges are designed to test your ability to reverse engineer malware shellcode.
 Shellcode1#Hello friend, in this challenge we are given a PE file named shellcode1.
          
        
        </description>
    </item>
    
    <item>
      <title>MalwareTech Windows Reversing Challenge #3 Write-Ups</title>
      <link>/posts/malwaretech-chal3/</link>
      <pubDate>Tue, 17 May 2022 11:11:05 +0700</pubDate>
      
      <guid>/posts/malwaretech-chal3/</guid>
      <description>
        
          
          
          
        
        
        
          [Hide and Seek]# Each exe contain one or more un-encrypted flags and you need to find the correct one without bruteforcing. These challenges are designed as an introduction to reverse engineering.
 Strings3#Still with the MalwareTech Windows reversing challenge, now we are given a PE file named strings3.exe_.
Also still with the same rules as the previous 2 (this and this), this challenge is static analysis only.
          
        
        </description>
    </item>
    
    <item>
      <title>MalwareTech Windows Reversing Challenge #2 Write-Ups</title>
      <link>/posts/malwaretech-chal2/</link>
      <pubDate>Sun, 15 May 2022 00:52:50 +0700</pubDate>
      
      <guid>/posts/malwaretech-chal2/</guid>
      <description>
        
          
          
          
        
        
        
          [Hide and Seek]# Each exe contain one or more un-encrypted flags and you need to find the correct one without bruteforcing. These challenges are designed as an introduction to reverse engineering.
 Strings#Hello friend, back again with the MalwareTech Windows reversing challenge, now we are given a PE file named strings2.exe_.
Same as the previous challenge, we can only use static analysis to solve this challenge.
          
        
        </description>
    </item>
    
    <item>
      <title>MalwareTech Windows Reversing Challenge #1 Write-Ups</title>
      <link>/posts/malwaretech-chal1/</link>
      <pubDate>Fri, 13 May 2022 15:50:24 +0700</pubDate>
      
      <guid>/posts/malwaretech-chal1/</guid>
      <description>
        
          
          
          
        
        
        
          [Hide and Seek]# Each exe contain one or more un-encrypted flags and you need to find the correct one without bruteforcing. These challenges are designed as an introduction to reverse engineering.
 Strings#Hello friend, in this challenge we are given a PE file named strings1.exe_ . The rule of this challenge is that we can only use static analysis to solve it, that&amp;rsquo;s why there is &amp;ldquo;_&amp;rdquo; at the end of the PE file name, which is to prevent us from accidentally running it.
          
        
        </description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      <description>
        
          
          
          
        
        
        
          Hi, i&amp;rsquo;m Irfan Alditya.
A software reverse engineering hobbyist.
Find me on twitter @aldityairfan
          
        
        </description>
    </item>
    
  </channel>
</rss>